#pragma checksum "C:\Users\novoz\git-repos\Sudoku\Sudoku\Sudoku\MainPage.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "589B7EC44B535FCB0B49102759D251BD9662CB11C888BF3940F540BFC05DEFE8"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sudoku
{
    partial class MainPage : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_Control_Background(global::Windows.UI.Xaml.Controls.Control obj, global::Windows.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.Brush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Background = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Panel_Background(global::Windows.UI.Xaml.Controls.Panel obj, global::Windows.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.Brush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Background = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_RangeBase_Value(global::Windows.UI.Xaml.Controls.Primitives.RangeBase obj, global::System.Double value)
            {
                obj.Value = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class MainPage_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMainPage_Bindings
        {
            private global::Sudoku.MainPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.AppBar obj2;
            private global::Windows.UI.Xaml.Controls.Grid obj10;
            private global::Windows.UI.Xaml.Controls.ProgressBar obj12;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj2BackgroundDisabled = false;
            private static bool isobj10BackgroundDisabled = false;
            private static bool isobj12ValueDisabled = false;

            private MainPage_obj1_BindingsTracking bindingsTracking;

            public MainPage_obj1_Bindings()
            {
                this.bindingsTracking = new MainPage_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 17 && columnNumber == 42)
                {
                    isobj2BackgroundDisabled = true;
                }
                else if (lineNumber == 31 && columnNumber == 11)
                {
                    isobj10BackgroundDisabled = true;
                }
                else if (lineNumber == 41 && columnNumber == 22)
                {
                    isobj12ValueDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // MainPage.xaml line 17
                        this.obj2 = (global::Windows.UI.Xaml.Controls.AppBar)target;
                        break;
                    case 10: // MainPage.xaml line 31
                        this.obj10 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 12: // MainPage.xaml line 39
                        this.obj12 = (global::Windows.UI.Xaml.Controls.ProgressBar)target;
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IMainPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Sudoku.MainPage)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Sudoku.MainPage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_gameBoard(obj.gameBoard, phase);
                    }
                }
            }
            private void Update_gameBoard(global::Sudoku.GameBoard obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_gameBoard_Cells(obj.Cells, phase);
                        this.Update_gameBoard_SudokuVM(obj.SudokuVM, phase);
                    }
                }
            }
            private void Update_gameBoard_Cells(global::System.Collections.Generic.List<global::Sudoku.Cell> obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_gameBoard_Cells_I0(obj[0], phase);
                    }
                }
            }
            private void Update_gameBoard_Cells_I0(global::Sudoku.Cell obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_gameBoard_Cells_I0_CellViewModel(obj.CellViewModel, phase);
                    }
                }
            }
            private void Update_gameBoard_Cells_I0_CellViewModel(global::Sudoku.CellViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_gameBoard_Cells_I0_CellViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_gameBoard_Cells_I0_CellViewModel_IsDarkModeNegated(obj.IsDarkModeNegated, phase);
                    }
                }
            }
            private void Update_gameBoard_Cells_I0_CellViewModel_IsDarkModeNegated(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 17
                    if (!isobj2BackgroundDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_Background(this.obj2, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("borderConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                    }
                    // MainPage.xaml line 31
                    if (!isobj10BackgroundDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Panel_Background(this.obj10, (global::Windows.UI.Xaml.Media.Brush)this.LookupConverter("borderConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Media.Brush), null, null), null);
                    }
                }
            }
            private void Update_gameBoard_SudokuVM(global::Sudoku.SudokuViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_gameBoard_SudokuVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_gameBoard_SudokuVM_SudokuSize(obj.SudokuSize, phase);
                    }
                }
            }
            private void Update_gameBoard_SudokuVM_SudokuSize(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // MainPage.xaml line 39
                    if (!isobj12ValueDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_RangeBase_Value(this.obj12, obj);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 0.0.0.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class MainPage_obj1_BindingsTracking
            {
                private global::System.WeakReference<MainPage_obj1_Bindings> weakRefToBindingObj; 

                public MainPage_obj1_BindingsTracking(MainPage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<MainPage_obj1_Bindings>(obj);
                }

                public MainPage_obj1_Bindings TryGetBindingObject()
                {
                    MainPage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_gameBoard_Cells_I0_CellViewModel(null);
                    UpdateChildListeners_gameBoard_SudokuVM(null);
                }

                public void PropertyChanged_gameBoard_Cells_I0_CellViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Sudoku.CellViewModel obj = sender as global::Sudoku.CellViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_gameBoard_Cells_I0_CellViewModel_IsDarkModeNegated(obj.IsDarkModeNegated, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "IsDarkModeNegated":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_gameBoard_Cells_I0_CellViewModel_IsDarkModeNegated(obj.IsDarkModeNegated, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Sudoku.CellViewModel cache_gameBoard_Cells_I0_CellViewModel = null;
                public void UpdateChildListeners_gameBoard_Cells_I0_CellViewModel(global::Sudoku.CellViewModel obj)
                {
                    if (obj != cache_gameBoard_Cells_I0_CellViewModel)
                    {
                        if (cache_gameBoard_Cells_I0_CellViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_gameBoard_Cells_I0_CellViewModel).PropertyChanged -= PropertyChanged_gameBoard_Cells_I0_CellViewModel;
                            cache_gameBoard_Cells_I0_CellViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_gameBoard_Cells_I0_CellViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_gameBoard_Cells_I0_CellViewModel;
                        }
                    }
                }
                public void PropertyChanged_gameBoard_SudokuVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Sudoku.SudokuViewModel obj = sender as global::Sudoku.SudokuViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_gameBoard_SudokuVM_SudokuSize(obj.SudokuSize, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "SudokuSize":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_gameBoard_SudokuVM_SudokuSize(obj.SudokuSize, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Sudoku.SudokuViewModel cache_gameBoard_SudokuVM = null;
                public void UpdateChildListeners_gameBoard_SudokuVM(global::Sudoku.SudokuViewModel obj)
                {
                    if (obj != cache_gameBoard_SudokuVM)
                    {
                        if (cache_gameBoard_SudokuVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_gameBoard_SudokuVM).PropertyChanged -= PropertyChanged_gameBoard_SudokuVM;
                            cache_gameBoard_SudokuVM = null;
                        }
                        if (obj != null)
                        {
                            cache_gameBoard_SudokuVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_gameBoard_SudokuVM;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 3: // MainPage.xaml line 19
                {
                    this.appbtnUndo = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)this.appbtnUndo).Click += this.AppBarButton_Click;
                }
                break;
            case 4: // MainPage.xaml line 20
                {
                    this.appbtnRedo = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)this.appbtnRedo).Click += this.AppBarButton_Click;
                }
                break;
            case 5: // MainPage.xaml line 21
                {
                    this.appbtnRemove = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)this.appbtnRemove).Click += this.AppBarButton_Click;
                }
                break;
            case 6: // MainPage.xaml line 23
                {
                    this.appbtnRestart = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)this.appbtnRestart).Click += this.AppBarButton_Click;
                }
                break;
            case 7: // MainPage.xaml line 24
                {
                    this.appbtnSettings = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                    ((global::Windows.UI.Xaml.Controls.AppBarButton)this.appbtnSettings).Click += this.AppBarButton_Click;
                }
                break;
            case 8: // MainPage.xaml line 25
                {
                    this.theme = (global::Windows.UI.Xaml.Controls.ToggleSwitch)(target);
                    ((global::Windows.UI.Xaml.Controls.ToggleSwitch)this.theme).Toggled += this.Theme_Toggled;
                }
                break;
            case 9: // MainPage.xaml line 26
                {
                    this.supervisorMode = (global::Windows.UI.Xaml.Controls.ToggleSwitch)(target);
                    ((global::Windows.UI.Xaml.Controls.ToggleSwitch)this.supervisorMode).Toggled += this.supervisorMode_Toggled;
                }
                break;
            case 11: // MainPage.xaml line 37
                {
                    this.gameBoard = (global::Sudoku.GameBoard)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // MainPage.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    MainPage_obj1_Bindings bindings = new MainPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

